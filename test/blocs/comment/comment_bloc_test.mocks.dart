// Mocks generated by Mockito 5.4.4 from annotations
// in innoscripta_test_kanban/test/blocs/comment/comment_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:innoscripta_test_kanban/data/models/comment_model.dart' as _i2;
import 'package:innoscripta_test_kanban/data/repositories/comment_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeComment_0 extends _i1.SmartFake implements _i2.Comment {
  _FakeComment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CommentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentRepository extends _i1.Mock implements _i3.CommentRepository {
  MockCommentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Comment>> getComments(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [taskId],
        ),
        returnValue: _i4.Future<List<_i2.Comment>>.value(<_i2.Comment>[]),
      ) as _i4.Future<List<_i2.Comment>>);

  @override
  _i4.Future<_i2.Comment> addComment({
    required String? taskId,
    required String? content,
    _i2.Attachment? attachment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [],
          {
            #taskId: taskId,
            #content: content,
            #attachment: attachment,
          },
        ),
        returnValue: _i4.Future<_i2.Comment>.value(_FakeComment_0(
          this,
          Invocation.method(
            #addComment,
            [],
            {
              #taskId: taskId,
              #content: content,
              #attachment: attachment,
            },
          ),
        )),
      ) as _i4.Future<_i2.Comment>);

  @override
  _i4.Future<_i2.Comment> updateComment({
    required String? commentId,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [],
          {
            #commentId: commentId,
            #content: content,
          },
        ),
        returnValue: _i4.Future<_i2.Comment>.value(_FakeComment_0(
          this,
          Invocation.method(
            #updateComment,
            [],
            {
              #commentId: commentId,
              #content: content,
            },
          ),
        )),
      ) as _i4.Future<_i2.Comment>);

  @override
  _i4.Future<void> deleteComment(String? commentId) => (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [commentId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
